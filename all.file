
// ==========================================================================
// This file contains all code from the PetPal project
// NOT RECOMMENDED FOR ACTUAL DEVELOPMENT - FOR REFERENCE ONLY
// ==========================================================================

// ========================== INDEX.HTML ==========================
/*
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PetPal - Your Pet Care Solution</title>
    <meta name="description" content="PetPal provides exceptional care for your furry, feathered, and scaled companions.">
    <link rel="icon" type="image/svg+xml" href="/favicon.ico">
</head>
<body>
    <div id="root"></div>
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
</body>
</html>
*/

// ========================== VITE.CONFIG.TS ==========================
/*
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  base: "./", // Use relative paths for GitHub Pages
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' && componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));
*/

// ========================== MAIN.TSX ==========================
/*
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

const root = document.getElementById("root");
if (root) {
  createRoot(root).render(<App />);
} else {
  console.error("Root element not found");
}
*/

// ========================== .PRETTIERRC ==========================
/*
{
  "semi": true,
  "singleQuote": false,
  "tabWidth": 2,
  "printWidth": 100,
  "trailingComma": "es5",
  "arrowParens": "always"
}
*/

// ========================== .EDITORCONFIG ==========================
/*
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 2
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true
*/

// ========================== .VSCODE/EXTENSIONS.JSON ==========================
/*
{
  "recommendations": [
    "dbaeumer.vscode-eslint",
    "esbenp.prettier-vscode",
    "bradlc.vscode-tailwindcss",
    "ms-vscode.vscode-typescript-next",
    "dsznajder.es7-react-js-snippets",
    "formulahendry.auto-rename-tag"
  ]
}
*/

// ========================== REACT COMPONENTS ==========================

// --------- src/lib/utils.ts ---------
/**
 * Class name utility
 */
function cn(...inputs: any[]) {
  return inputs.filter(Boolean).join(" ");
}

// --------- src/components/ui/aspect-ratio.tsx ---------
/**
 * AspectRatio component from @radix-ui/react-aspect-ratio
 */
// Simulating imports
const AspectRatio = {
  Root: ({ children, ratio }: { children: React.ReactNode, ratio: number }) => {
    return <div style={{ position: 'relative', width: '100%', paddingBottom: `${100 / ratio}%` }}>
      <div style={{ position: 'absolute', width: '100%', height: '100%' }}>
        {children}
      </div>
    </div>;
  }
};

// --------- src/components/layout/Layout.tsx ---------
/**
 * Main layout component
 */
const Layout = ({ children }: { children: React.ReactNode }) => {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow pt-20">
        <PageTransition>
          {children}
        </PageTransition>
      </main>
      <Footer />
    </div>
  );
};

// --------- src/components/auth/AuthButtons.tsx ---------
/**
 * Authentication buttons component
 */
const AuthButtons = ({ fullWidth = false }: { fullWidth?: boolean }) => {
  return (
    <>
      <Button
        variant="ghost"
        className={cn(
          "text-foreground/80 hover:text-foreground",
          fullWidth && "w-full justify-center"
        )}
        asChild
      >
        <Link to="/auth/sign-in">Sign In</Link>
      </Button>
      <Button
        variant="default"
        className={cn(fullWidth && "w-full justify-center")}
        asChild
      >
        <Link to="/auth/sign-up">Sign Up</Link>
      </Button>
    </>
  );
};

// --------- src/components/ui/progress.tsx ---------
/**
 * Progress component from @radix-ui/react-progress
 */
const Progress = React.forwardRef(({ className, value, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <div
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </div>
));
Progress.displayName = "Progress";

// --------- src/components/ui/PageTransition.tsx ---------
/**
 * Page transition component
 */
const PageTransition = ({ children }: { children: React.ReactNode }) => {
  const location = useLocation();
  const [displayLocation, setDisplayLocation] = useState(location);
  const [transitionStage, setTransitionStage] = useState("fadeIn");

  useEffect(() => {
    if (location.pathname !== displayLocation.pathname) {
      setTransitionStage("fadeOut");
    }
  }, [location, displayLocation]);

  const handleAnimationEnd = () => {
    if (transitionStage === "fadeOut") {
      setTransitionStage("fadeIn");
      setDisplayLocation(location);
      
      // Scroll to top on page change
      window.scrollTo(0, 0);
    }
  };

  return (
    <div
      className={`transition-opacity duration-300 ease-in-out ${
        transitionStage === "fadeIn" ? "opacity-100" : "opacity-0"
      }`}
      onAnimationEnd={handleAnimationEnd}
    >
      {children}
    </div>
  );
};

// --------- src/components/ui/badge.tsx ---------
/**
 * Badge component with variants
 */
const badgeVariants = {
  default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
  secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
  destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
  outline: "text-foreground"
};

function Badge({ className, variant = "default", ...props }) {
  return (
    <div className={cn("inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2", badgeVariants[variant], className)} {...props} />
  );
}

// --------- src/components/ui/popover.tsx ---------
/**
 * Popover component from @radix-ui/react-popover
 */
const Popover = { Root: (props) => <div {...props} /> };
const PopoverTrigger = (props) => <button {...props} />;
const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <div className={cn(
    "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    className
  )} ref={ref} {...props} />
));
PopoverContent.displayName = "PopoverContent";

// --------- src/components/services/ServiceCard.tsx ---------
/**
 * Service card component
 */
const ServiceCard = ({ title, description, icon, path, className }: {
  title: string;
  description: string;
  icon: React.ReactNode;
  path: string;
  className?: string;
}) => {
  return (
    <Link 
      to={path} 
      className={cn(
        "group relative overflow-hidden rounded-2xl border border-border bg-card p-6 transition-all duration-300 hover:shadow-md hover:border-primary/20",
        className
      )}
    >
      <div className="absolute top-0 right-0 w-32 h-32 bg-primary/5 rounded-full -mr-16 -mt-16 transition-transform duration-500 group-hover:scale-150" />
      
      <div className="relative">
        <div className="flex justify-between items-start mb-4">
          <div className="w-12 h-12 flex items-center justify-center rounded-xl bg-primary/10 text-primary">
            {icon}
          </div>
          <ArrowRight className="text-primary opacity-0 -translate-x-4 transition-all duration-300 group-hover:opacity-100 group-hover:translate-x-0" />
        </div>
        
        <h3 className="text-xl font-display font-medium mb-2">{title}</h3>
        <p className="text-muted-foreground">{description}</p>
      </div>
    </Link>
  );
};

// --------- src/components/ui/avatar.tsx ---------
/**
 * Avatar component
 */
const Avatar = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props}
  />
));
Avatar.displayName = "Avatar";

const AvatarImage = React.forwardRef(({ className, ...props }, ref) => (
  <img
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = "AvatarImage";

const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)}
    {...props}
  />
));
AvatarFallback.displayName = "AvatarFallback";

// --------- src/components/ui/radio-group.tsx ---------
/**
 * Radio group component
 */
const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = "RadioGroup";

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <button
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <div className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </div>
    </button>
  );
});
RadioGroupItem.displayName = "RadioGroupItem";

// --------- src/components/ui/alert.tsx ---------
/**
 * Alert component
 */
const alertVariants = {
  default: "bg-background text-foreground",
  destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive"
};

const Alert = React.forwardRef(({ className, variant = "default", ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(
      "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
      alertVariants[variant],
      className
    )}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

// --------- src/components/ui/scroll-area.tsx ---------
/**
 * Scroll area component
 */
const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <div className="h-full w-full rounded-[inherit]">
      {children}
    </div>
    <ScrollBar />
  </div>
));
ScrollArea.displayName = "ScrollArea";

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <div
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <div className="relative flex-1 rounded-full bg-border" />
  </div>
));
ScrollBar.displayName = "ScrollBar";

// --------- src/components/ui/resizable.tsx ---------
/**
 * Resizable component
 */
const ResizablePanelGroup = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
);

const ResizablePanel = (props) => <div {...props} />;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}) => (
  <div
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </div>
);

// --------- src/components/ui/SearchBar.tsx ---------
/**
 * Search bar component
 */
const SearchBar = ({ fullWidth = false }: { fullWidth?: boolean }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [isFocused, setIsFocused] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Searching for:", searchTerm);
    // Handle search logic
  };

  const clearSearch = () => {
    setSearchTerm("");
  };

  return (
    <form 
      onSubmit={handleSubmit} 
      className={cn(
        "relative group",
        fullWidth ? "w-full" : "w-48 md:w-64"
      )}
    >
      <div className={cn(
        "flex items-center bg-secondary/50 rounded-full transition-all duration-300",
        isFocused ? "bg-background border-primary ring-1 ring-primary/30" : "border-transparent",
        fullWidth ? "w-full" : ""
      )}>
        <span className="absolute left-3 text-muted-foreground">
          <Search size={18} />
        </span>
        <input
          type="text"
          placeholder="Search..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          className="w-full py-2 pl-10 pr-8 rounded-full bg-transparent focus:outline-none text-sm"
        />
        {searchTerm && (
          <button
            type="button"
            onClick={clearSearch}
            className="absolute right-3 text-muted-foreground hover:text-foreground"
            aria-label="Clear search"
          >
            <X size={16} />
          </button>
        )}
      </div>
    </form>
  );
};

// --------- src/components/ui/card.tsx ---------
/**
 * Card component
 */
const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

// --------- src/components/ui/button.tsx ---------
/**
 * Button component with variants
 */
const buttonVariants = {
  default: "bg-primary text-primary-foreground hover:bg-primary/90",
  destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
  outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
  secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
  ghost: "hover:bg-accent hover:text-accent-foreground",
  link: "text-primary underline-offset-4 hover:underline"
};

const buttonSizes = {
  default: "h-10 px-4 py-2",
  sm: "h-9 rounded-md px-3",
  lg: "h-11 rounded-md px-8",
  icon: "h-10 w-10"
};

const Button = React.forwardRef(
  ({ className, variant = "default", size = "default", asChild = false, ...props }, ref) => {
    const Comp = asChild ? (props.children.type) : "button";
    return (
      <Comp
        className={cn(
          "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
          buttonVariants[variant],
          buttonSizes[size],
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

// --------- src/components/ui/accordion.tsx ---------
/**
 * Accordion component
 */
const Accordion = (props) => <div {...props} />;

const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <div className="flex">
    <button
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </button>
  </div>
));
AccordionTrigger.displayName = "AccordionTrigger";

const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <div
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </div>
));
AccordionContent.displayName = "AccordionContent";

// --------- src/components/ui/calendar.tsx ---------
/**
 * Calendar component
 */
function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return (
    <div
      className={cn("p-3", className)}
      {...props}
    >
      {/* Calendar implementation would go here */}
      <div>Calendar Component (Placeholder)</div>
    </div>
  );
}
Calendar.displayName = "Calendar";

// --------- src/components/ui/breadcrumb.tsx ---------
/**
 * Breadcrumb component
 */
const Breadcrumb = React.forwardRef(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = "Breadcrumb";

const BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
));
BreadcrumbList.displayName = "BreadcrumbList";

const BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
));
BreadcrumbItem.displayName = "BreadcrumbItem";

const BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? (props.children.type) : "a";

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = "BreadcrumbLink";

const BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
));
BreadcrumbPage.displayName = "BreadcrumbPage";

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

const BreadcrumbEllipsis = ({
  className,
  ...props
}) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";

// --------- src/components/ui/pagination.tsx ---------
/**
 * Pagination component
 */
const Pagination = ({ className, ...props }) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({
  className,
  ...props
}) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

// --------- src/components/layout/Footer.tsx ---------
/**
 * Footer component
 */
const Footer = () => {
  return (
    <footer className="bg-secondary pt-12 pb-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-8">
          <div className="col-span-1 md:col-span-1">
            <Link to="/" className="inline-block mb-4">
              <span className="text-xl font-display font-semibold">PetPal</span>
            </Link>
            <p className="text-muted-foreground max-w-xs mb-4">
              Providing exceptional care for your furry, feathered, and scaled companions.
            </p>
            <div className="flex space-x-4">
              <a href="#" className="text-foreground/70 hover:text-primary transition-colors" aria-label="Facebook">
                <Facebook size={20} />
              </a>
              <a href="#" className="text-foreground/70 hover:text-primary transition-colors" aria-label="Instagram">
                <Instagram size={20} />
              </a>
              <a href="#" className="text-foreground/70 hover:text-primary transition-colors" aria-label="Twitter">
                <Twitter size={20} />
              </a>
            </div>
          </div>

          <div>
            <h4 className="font-display text-base font-medium mb-4">Services</h4>
            <ul className="space-y-2">
              <li><Link to="/services/pet-grooming" className="text-muted-foreground hover:text-primary transition-colors">Pet Grooming</Link></li>
              <li><Link to="/services/vet-finder" className="text-muted-foreground hover:text-primary transition-colors">Vet Finder</Link></li>
              <li><Link to="/services/chat-with-vets" className="text-muted-foreground hover:text-primary transition-colors">Chat with Vets</Link></li>
              <li><Link to="/services/emergency-locator" className="text-muted-foreground hover:text-primary transition-colors">Emergency Pet Locator</Link></li>
            </ul>
          </div>

          <div>
            <h4 className="font-display text-base font-medium mb-4">Shop</h4>
            <ul className="space-y-2">
              <li><Link to="/pet-shop" className="text-muted-foreground hover:text-primary transition-colors">Pet Food</Link></li>
              <li><Link to="/pet-shop" className="text-muted-foreground hover:text-primary transition-colors">Accessories</Link></li>
              <li><Link to="/pet-shop" className="text-muted-foreground hover:text-primary transition-colors">Toys</Link></li>
              <li><Link to="/pet-shop" className="text-muted-foreground hover:text-primary transition-colors">Health Products</Link></li>
            </ul>
          </div>

          <div>
            <h4 className="font-display text-base font-medium mb-4">Company</h4>
            <ul className="space-y-2">
              <li><Link to="/about-us" className="text-muted-foreground hover:text-primary transition-colors">About Us</Link></li>
              <li><Link to="/about-us" className="text-muted-foreground hover:text-primary transition-colors">Careers</Link></li>
              <li><a href="#" className="text-muted-foreground hover:text-primary transition-colors">Privacy Policy</a></li>
              <li><a href="#" className="text-muted-foreground hover:text-primary transition-colors">Terms of Service</a></li>
            </ul>
          </div>
        </div>
        
        <div className="border-t border-border pt-8">
          <p className="text-center text-sm text-muted-foreground">
            © {new Date().getFullYear()} PetPal. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  );
};

// --------- src/pages/auth/SignIn.tsx ---------
/**
 * Sign In page
 */
const SignIn = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [rememberMe, setRememberMe] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log({ email, password, rememberMe });
    // Handle sign in logic
  };

  return (
    <div className="page-container max-w-md mx-auto py-12">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-display font-medium tracking-tight mb-2">Welcome Back</h1>
        <p className="text-muted-foreground">Sign in to access your PetPal account</p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-2">
          <Label htmlFor="email">Email</Label>
          <Input 
            id="email" 
            type="email" 
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>

        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <Label htmlFor="password">Password</Label>
            <Link to="/auth/forgot-password" className="text-sm text-primary hover:text-primary/80 transition-colors">
              Forgot password?
            </Link>
          </div>
          <div className="relative">
            <Input 
              id="password" 
              type={showPassword ? "text" : "password"} 
              placeholder="Enter your password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <button
              type="button"
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground"
              onClick={() => setShowPassword(!showPassword)}
              aria-label={showPassword ? "Hide password" : "Show password"}
            >
              {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </button>
          </div>
        </div>

        <div className="flex items-center space-x-2">
          <Checkbox 
            id="remember-me" 
            checked={rememberMe}
            onCheckedChange={(checked) => setRememberMe(checked as boolean)}
          />
          <Label htmlFor="remember-me" className="text-sm cursor-pointer">Remember me for 30 days</Label>
        </div>

        <Button type="submit" className="w-full">
          Sign In
        </Button>

        <div className="relative my-6">
          <div className="absolute inset-0 flex items-center">
            <div className="w-full border-t border-border"></div>
          </div>
          <div className="relative flex justify-center text-xs">
            <span className="bg-background px-2 text-muted-foreground">Or continue with</span>
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <Button variant="outline" type="button" className="w-full">
            Google
          </Button>
          <Button variant="outline" type="button" className="w-full">
            Apple
          </Button>
        </div>

        <p className="text-center text-sm text-muted-foreground mt-6">
          Don't have an account?{" "}
          <Link to="/auth/sign-up" className="text-primary hover:text-primary/80 transition-colors">
            Sign up
          </Link>
        </p>
      </form>
    </div>
  );
};

// --------- src/components/ui/alert-dialog.tsx ---------
/**
 * Alert dialog component
 */
const AlertDialog = (props) => <div {...props} />;
const AlertDialogTrigger = (props) => <button {...props} />;
const AlertDialogPortal = (props) => <div {...props} />;

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <div
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = "AlertDialogOverlay";

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <div
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = "AlertDialogContent";

const AlertDialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h2
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
));
AlertDialogTitle.displayName = "AlertDialogTitle";

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
AlertDialogDescription.displayName = "AlertDialogDescription";

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <button
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = "AlertDialogAction";

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <button
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = "AlertDialogCancel";

// --------- src/pages/auth/SignUp.tsx ---------
/**
 * Sign Up page
 */
const SignUp = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [agreedToTerms, setAgreedToTerms] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log({ name, email, password, agreedToTerms });
    // Handle sign up logic
  };

  return (
    <div className="page-container max-w-md mx-auto py-12">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-display font-medium tracking-tight mb-2">Create an Account</h1>
        <p className="text-muted-foreground">Join PetPal to access all our pet care services</p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-2">
          <Label htmlFor="name">Full Name</Label>
          <Input 
            id="name" 
            type="text" 
            placeholder="Enter your full name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="email">Email</Label>
          <Input 
            id="email" 
            type="email" 
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="password">Password</Label>
          <div className="relative">
            <Input 
              id="password" 
              type={showPassword ? "text" : "password"} 
              placeholder="Create a password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <button
              type="button"
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground"
              onClick={() => setShowPassword(!showPassword)}
              aria-label={showPassword ? "Hide password" : "Show password"}
            >
              {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </button>
          </div>
          <p className="text-xs text-muted-foreground mt-1">
            Password must be at least 8 characters long with a mix of letters, numbers, and symbols.
          </p>
        </div>

        <div className="flex items-start space-x-2">
          <Checkbox 
            id="terms" 
            checked={agreedToTerms}
            onCheckedChange={(checked) => setAgreedToTerms(checked as boolean)}
            required
          />
          <Label htmlFor="terms" className="text-sm cursor-pointer">
            I agree to the <a href="#" className="text-primary hover:underline">Terms of Service</a> and <a href="#" className="text-primary hover:underline">Privacy Policy</a>
          </Label>
        </div>

        <Button type="submit" className="w-full">
          Create Account
        </Button>

        <div className="relative my-6">
          <div className="absolute inset-0 flex items-center">
            <div className="w-full border-t border-border"></div>
          </div>
          <div className="relative flex justify-center text-xs">
            <span className="bg-background px-2 text-muted-foreground">Or continue with</span>
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <Button variant="outline" type="button" className="w-full">
            Google
          </Button>
          <Button variant="outline" type="button" className="w-full">
            Apple
          </Button>
        </div>

        <p className="text-center text-sm text-muted-foreground mt-6">
          Already have an account?{" "}
          <Link to="/auth/sign-in" className="text-primary hover:text-primary/80 transition-colors">
            Sign in
          </Link>
        </p>
      </form>
    </div>
  );
};

// --------- src/components/layout/Header.tsx ---------
/**
 * Header component
 */
const Header = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const location = useLocation();

  // Check if we're on a service page to handle active states
  const isServicePage = location.pathname.startsWith("/services/");
  
  // Handle scroll event for header styling
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };
    
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const navLinks = [
    { name: "Home", path: "/" },
    { name: "Services", path: "/services" },
    { name: "Pet Shop", path: "/pet-shop" },
    { name: "Pet Care", path: "/pet-care" },
    { name: "About Us", path: "/about-us" },
  ];

  // Determine if a nav link is active
  const isActive = (path: string) => {
    if (path === "/" && location.pathname === "/") {
      return true;
    }
    if (path !== "/" && location.pathname.startsWith(path)) {
      return true;
    }
    return false;
  };

  return (
    <header
      className={cn(
        "fixed top-0 left-0 right-0 z-50 transition-all duration-300 ease-in-out",
        isScrolled
          ? "bg-background/80 backdrop-blur-md shadow-sm py-3"
          : "bg-transparent py-5"
      )}
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6">
        <div className="flex items-center justify-between">
          {/* Logo */}
          <Link 
            to="/" 
            className="flex items-center"
            aria-label="Go to homepage"
          >
            <span className="text-xl font-display font-semibold text-foreground">PetPal</span>
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex space-x-1 items-center">
            {navLinks.map((link) => (
              <Link
                key={link.name}
                to={link.path}
                className={cn(
                  "nav-link",
                  isActive(link.path) && "active"
                )}
              >
                {link.name}
              </Link>
            ))}
          </nav>

          {/* Search, Auth buttons */}
          <div className="hidden md:flex items-center space-x-4">
            <SearchBar />
            <AuthButtons />
          </div>

          {/* Mobile menu button */}
          <Button
            variant="ghost"
            size="icon"
            className="md:hidden"
            onClick={() => setIsMobileMenuOpen(true)}
            aria-label="Open menu"
          >
            <Menu className="h-6 w-6" />
          </Button>
        </div>
      </div>

      {/* Mobile menu */}
      {isMobileMenuOpen && (
        <div className="fixed inset-0 bg-background z-50 animate-fade-in">
          <div className="flex flex-col h-full p-4">
            <div className="flex justify-between items-center mb-8">
              <Link 
                to="/" 
                className="text-xl font-display font-semibold"
                onClick={() => setIsMobileMenuOpen(false)}
              >
                PetPal
              </Link>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setIsMobileMenuOpen(false)}
                aria-label="Close menu"
              >
                <X className="h-6 w-6" />
              </Button>
            </div>
            <nav className="flex flex-col space-y-4 mb-8">
              {navLinks.map((link) => (
                <Link
                  key={link.name}
                  to={link.path}
                  className={cn(
                    "text-lg py-2",
                    isActive(link.path) ? "text-primary font-medium" : "text-foreground/80"
                  )}
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  {link.name}
                </Link>
              ))}
            </nav>
            <div className="mt-auto space-y-4">
              <SearchBar fullWidth />
              <div className="flex flex-col space-y-3">
                <AuthButtons fullWidth />
              </div>
            </div>
          </div>
        </div>
      )}
    </header>
  );
};

// --------- src/pages/services/PetGrooming.tsx ---------
/**
 * Pet Grooming page
 */
const PetGrooming = () => {
  const groomingServices = [
    { name: "Bath & Brush", price: "$40+", description: "Deep cleaning shampoo, conditioning, and brushing" },
    { name: "Full Grooming", price: "$65+", description: "Bath, haircut, nail trim, ear cleaning, and more" },
    { name: "Nail Trim", price: "$15", description: "Professional nail trimming for your pet's comfort" },
    { name: "Teeth Cleaning", price: "$25", description: "Maintain your pet's dental health" },
    { name: "De-shedding Treatment", price: "$35+", description: "Reduces shedding by up to 90%" },
    { name: "Flea & Tick Treatment", price: "$30", description: "Eliminate parasites and prevent infestations" }
  ];

  const benefits = [
    "Professional, certified groomers",
    "Stress-free environment for your pet",
    "Premium, pet-safe products",
    "Breed-specific grooming techniques",
    "Special care for senior pets",
    "Convenient scheduling"
  ];

  return (
    <div className="page-container">
      {/* Hero Section */}
      <div className="relative rounded-3xl overflow-hidden mb-16">
        <div className="absolute inset-0 bg-[url('https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?ixlib=rb-4.0.3&auto=format&fit=crop&w=1950&q=80')] bg-cover bg-center"></div>
        <div className="absolute inset-0 bg-gradient-to-r from-background to-transparent"></div>
        <div className="relative py-20 px-8 md:px-12 max-w-2xl">
          <div className="inline-block px-4 py-1.5 mb-6 rounded-full bg-primary/10 backdrop-blur-sm text-primary text-sm font-medium">
            Pet Grooming Services
          </div>
          <h1 className="text-4xl md:text-5xl font-display font-medium tracking-tight mb-6">
            Professional Grooming For Your Pet
          </h1>
          <p className="text-xl mb-8 max-w-lg">
            Our skilled groomers provide professional services tailored to your pet's specific needs, breed, and coat type.
          </p>
          <Button size="lg" className="rounded-full px-8">
            Book Appointment
          </Button>
        </div>
      </div>

      {/* Services Grid */}
      <div className="mb-16">
        <h2 className="text-3xl font-display font-medium mb-8">Our Grooming Services</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {groomingServices.map((service) => (
            <div key={service.name} className="bg-card border border-border rounded-xl p-6 transition-all hover:shadow-md hover:border-primary/20">
              <div className="flex justify-between items-start mb-2">
                <h3 className="text-xl font-medium">{service.name}</h3>
                <span className="text-primary font-medium">{service.price}</span>
              </div>
              <p className="text-muted-foreground">{service.description}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Benefits */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-12 items-center mb-16">
        <div>
          <h2 className="text-3xl font-display font-medium mb-6">Why Choose Our Grooming Services</h2>
          <ul className="space-y-4">
            {benefits.map((benefit) => (
              <li key={benefit} className="flex items-start">
                <span className="mr-3 mt-1 bg-primary/10 rounded-full p-1 text-primary">
                  <Check className="h-4 w-4" />
                </span>
                <span>{benefit}</span>
              </li>
            ))}
          </ul>
        </div>
        <div className="relative">
          <div className="absolute -inset-4 bg-gradient-to-r from-primary/10 to-primary/5 rounded-3xl blur-xl opacity-60"></div>
          <img
            src="https://images.unsplash.com/photo-1591946614720-90a587da4a36?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80"
            alt="Happy groomed pet"
            className="relative rounded-2xl shadow-md w-full h-80 object-cover"
          />
        </div>
      </div>

      {/* CTA */}
      <div className="bg-primary/5 rounded-2xl p-8 md:p-12 flex flex-col md:flex-row md:items-center justify-between">
        <div>
          <h3 className="text-2xl font-display font-medium mb-2">Ready to book a grooming session?</h3>
          <p className="text-muted-foreground mb-6 md:mb-0">Give your pet the care they deserve with our professional grooming services.</p>
        </div>
        <Button size="lg" className="rounded-full px-8 group whitespace-nowrap">
          Book Now
          <ArrowRight className="ml-2 h-4 w-4 transition-transform duration-300 group-hover:translate-x-1" />
        </Button>
      </div>
    </div>
  );
};

// --------- src/components/ui/navigation-menu.tsx ---------
/**
 * Navigation menu component
 */
const NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
  </div>
));
NavigationMenu.displayName = "NavigationMenu";

const NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
));
NavigationMenuList.displayName = "NavigationMenuList";

const NavigationMenuItem = (props) => <li {...props} />;

// Define more navigation menu components here...

// --------- src/hooks/use-mobile.tsx ---------
/**
 * Hook to detect mobile devices
 */
function useIsMobile() {
  const [isMobile, setIsMobile] = useState(undefined);
  const MOBILE_BREAKPOINT = 768;

  useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}

// ================================================
// APP.TSX - Main Application Component
// ================================================

import React, { useState, useEffect } from "react";
import { BrowserRouter as Router, Routes, Route, Link, useLocation } from "react-router-dom";
import { Check, ChevronDown, ChevronLeft, ChevronRight, 
         Menu, X, Facebook, Instagram, Twitter, 
         Eye, EyeOff, Search, MapPin, Phone, Clock, 
         ArrowRight, Circle, GripVertical, AlertTriangle,
         MessageCircle, Video, MoreHorizontal } from "lucide-react";

// Input component simulated
const Input = React.forwardRef(({ className, ...props }, ref) => (
  <input
    className={cn(
      "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    ref={ref}
    {...props}
  />
));
Input.displayName = "Input";

// Label component simulated
const Label = React.forwardRef(({ className, ...props }, ref) => (
  <label
    ref={ref}
    className={cn(
      "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
      className
    )}
    {...props}
  />
));
Label.displayName = "Label";

// Checkbox component simulated
const Checkbox = React.forwardRef(({ className, checked, onCheckedChange, ...props }, ref) => (
  <div className={cn("flex items-center space-x-2", className)}>
    <input
      ref={ref}
      type="checkbox"
      checked={checked}
      onChange={(e) => onCheckedChange?.(e.target.checked)}
      className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
      {...props}
    />
  </div>
));
Checkbox.displayName = "Checkbox";

// Tabs components simulated
const Tabs = ({ defaultValue, className, children }) => {
  const [value, setValue] = useState(defaultValue);
  
  return (
    <div className={className}>
      {React.Children.map(children, (child) => {
        if (child.type === TabsList || child.type === TabsContent) {
          return React.cloneElement(child, { value, setValue });
        }
        return child;
      })}
    </div>
  );
};

const TabsList = ({ className, children, value, setValue }) => (
  <div className={className}>
    {React.Children.map(children, (child) => {
      if (child.type === TabsTrigger) {
        return React.cloneElement(child, { 
          isActive: child.props.value === value,
          onClick: () => setValue(child.props.value),
          value
        });
      }
      return child;
    })}
  </div>
);

const TabsTrigger = ({ className, children, value, isActive, onClick }) => (
  <button
    className={cn(
      className,
      isActive && "bg-background border-b-2 border-primary"
    )}
    onClick={onClick}
  >
    {children}
  </button>
);

const TabsContent = ({ className, children, value: tabValue, value: currentValue }) => {
  if (tabValue !== currentValue) return null;
  return <div className={className}>{children}</div>;
};

// EmergencyLocator page component
const EmergencyLocator = () => {
  // Mock emergency vet clinics data
  const emergencyClinics = [
    {
      id: 1,
      name: "City Animal Emergency Hospital",
      address: "123 Emergency Drive, New York, NY",
      phone: "(555) 911-PETS",
      hours: "Open 24/7",
      distance: "1.2 miles away",
      status: "Open now",
      waitTime: "~15 min wait"
    },
    {
      id: 2,
      name: "Metro Pet Emergency Center",
      address: "456 Urgent Care Lane, New York, NY",
      phone: "(555) 247-VETS",
      hours: "Open 24/7",
      distance: "2.8 miles away",
      status: "Open now",
      waitTime: "~30 min wait"
    },
    {
      id: 3,
      name: "Brooklyn Animal Critical Care",
      address: "789 Critical Path, Brooklyn, NY",
      phone: "(555) 365-HELP",
      hours: "Open 24/7",
      distance: "4.3 miles away",
      status: "Open now",
      waitTime: "~10 min wait"
    }
  ];

  // Emergency guidelines
  const emergencyGuidelines = [
    {
      condition: "Difficulty Breathing",
      symptoms: "Labored breathing, gasping, blue or pale gums",
      action: "Immediate veterinary attention required"
    },
    {
      condition: "Severe Bleeding",
      symptoms: "Uncontrolled bleeding, large wounds",
      action: "Apply pressure with clean cloth and seek immediate care"
    },
    {
      condition: "Seizures",
      symptoms: "Convulsions, loss of consciousness, paddling legs",
      action: "Time the seizure, keep away from hazards, seek immediate care"
    },
    {
      condition: "Potential Poisoning",
      symptoms: "Vomiting, drooling, lethargy after ingesting something suspicious",
      action: "Call pet poison hotline (888-426-4435) and seek vet care"
    }
  ];

  return (
    <div className="page-container">
      {/* Alert Banner */}
      <div className="bg-destructive/10 border border-destructive/30 rounded-xl p-4 mb-12 flex items-center">
        <AlertTriangle className="h-6 w-6 text-destructive mr-3 shrink-0" />
        <div>
          <p className="font-medium text-destructive">For life-threatening emergencies:</p>
          <p className="text-foreground/80">Call ahead to the nearest emergency clinic while en route. This service helps locate care but is not a substitute for immediate medical attention.</p>
        </div>
      </div>

      {/* Hero Section */}
      <div className="text-center mb-16">
        <div className="inline-block px-4 py-1.5 mb-6 rounded-full bg-primary/10 text-primary text-sm font-medium">
          Emergency Services
        </div>
        <h1 className="text-4xl md:text-5xl font-display font-medium tracking-tight mb-6">
          Emergency Pet Locator
        </h1>
        <p className="text-xl text-muted-foreground mb-8 max-w-2xl mx-auto">
          Quickly find emergency veterinary care near you when every second counts.
        </p>
      </div>

      {/* Search Box */}
      <div className="bg-card border border-border rounded-2xl p-6 mb-12 shadow-sm">
        <form className="flex flex-col md:flex-row gap-4">
          <div className="relative flex-grow">
            <MapPin className="absolute left-3 top-3 h-5 w-5 text-muted-foreground" />
            <Input 
              type="text" 
              placeholder="Enter your location"
              className="pl-10 h-12"
              defaultValue="New York, NY" 
            />
          </div>
          <Button className="h-12 px-8">Find Emergency Care</Button>
        </form>
      </div>

      {/* Results */}
      <div className="mb-16">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-display font-medium">Nearby Emergency Clinics</h2>
          <span className="text-muted-foreground">3 facilities found</span>
        </div>
        
        <div className="space-y-4">
          {emergencyClinics.map((clinic) => (
            <div key={clinic.id} className="bg-card border border-border rounded-xl overflow-hidden transition-all hover:shadow-md hover:border-primary/20">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-6">
                <div className="md:col-span-2">
                  <div className="flex flex-wrap gap-2 mb-1">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      {clinic.status}
                    </span>
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {clinic.waitTime}
                    </span>
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                      {clinic.distance}
                    </span>
                  </div>
                  
                  <h3 className="text-xl font-medium mb-2">{clinic.name}</h3>
                  
                  <div className="space-y-2 text-sm">
                    <div className="flex items-start">
                      <MapPin className="h-5 w-5 text-muted-foreground mr-2 mt-0.5" />
                      <span>{clinic.address}</span>
                    </div>
                    <div className="flex items-start">
                      <Phone className="h-5 w-5 text-muted-foreground mr-2 mt-0.5" />
                      <span>{clinic.phone}</span>
                    </div>
                    <div className="flex items-start">
                      <Clock className="h-5 w-5 text-muted-foreground mr-2 mt-0.5" />
                      <span className="font-medium text-green-600">{clinic.hours}</span>
                    </div>
                  </div>
                </div>
                
                <div className="flex flex-col justify-center gap-3">
                  <Button className="w-full" variant="default">
                    Get Directions
                  </Button>
                  <Button className="w-full" variant="outline">
                    Call Clinic
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Emergency Guidelines */}
      <div className="mb-16">
        <h2 className="text-2xl font-display font-medium mb-6">
          Pet Emergency Guidelines
        </h2>
        <p className="text-muted-foreground mb-6">
          Recognize these common emergency situations and know how to respond:
        </p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {emergencyGuidelines.map((guideline) => (
            <div key={guideline.condition} className="bg-card border border-border rounded-xl p-5">
              <h3 className="text-lg font-medium mb-2">{guideline.condition}</h3>
              <p className="text-sm mb-1"><span className="font-medium">Signs:</span> {guideline.symptoms}</p>
              <p className="text-sm text-destructive font-medium">{guideline.action}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Emergency Kit */}
      <div className="bg-primary/5 rounded-2xl p-8 md:p-12">
        <h3 className="text-2xl font-display font-medium mb-6">Pet Emergency Kit Essentials</h3>
        <p className="text-muted-foreground mb-6">
          Be prepared for emergencies by keeping these items on hand:
        </p>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
          <div className="bg-background rounded-xl p-4">
            <ul className="space-y-2">
              <li>Gauze pads and rolls</li>
              <li>Adhesive tape</li>
              <li>Cotton balls</li>
              <li>Fresh 3% hydrogen peroxide</li>
            </ul>
          </div>
          <div className="bg-background rounded-xl p-4">
            <ul className="space-y-2">
              <li>Digital thermometer</li>
              <li>Tweezers</li>
              <li>Scissors (blunt-tipped)</li>
              <li>Styptic powder</li>
            </ul>
          </div>
          <div className="bg-background rounded-xl p-4">
            <ul className="space-y-2">
              <li>Pet carrier</li>
              <li>Muzzle (not for vomiting pets)</li>
              <li>Leash and collar</li>
              <li>Your vet's contact information</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

// ChatWithVets page component
const ChatWithVets = () => {
  const benefits = [
    "24/7 access to licensed veterinarians",
    "Quick responses to non-emergency questions",
    "Convenient follow-up consultations",
    "Secure and private communication",
    "Prescription refills when appropriate",
    "Lower cost than in-person visits for minor concerns"
  ];

  const faqs = [
    {
      question: "How does the chat service work?",
      answer: "Our telemedicine platform connects you with licensed veterinarians via video, voice, or text chat. Simply create an account, describe your pet's issue, and you'll be connected with a qualified vet who can provide guidance."
    },
    {
      question: "Can vets prescribe medication through chat?",
      answer: "In some cases, veterinarians can prescribe or refill medications through our platform, but this depends on your location, regulations, and whether the vet has an established relationship with your pet."
    },
    {
      question: "What issues are appropriate for telemedicine?",
      answer: "Telemedicine is suitable for non-emergency concerns, follow-up questions, behavior issues, nutritional advice, and minor symptoms. Emergency situations always require immediate in-person veterinary care."
    },
    {
      question: "How much does it cost?",
      answer: "We offer various plans starting at $15 for a single text consultation. Our monthly subscription provides unlimited text consultations and discounted video appointments."
    }
  ];

  return (
    <div className="page-container">
      <div className="text-center mb-16">
        <div className="inline-block px-4 py-1.5 mb-6 rounded-full bg-primary/10 text-primary text-sm font-medium">
          Telemedicine
        </div>
        <h1 className="text-4xl md:text-5xl font-display font-medium tracking-tight mb-6">
          Chat With Licensed Veterinarians
        </h1>
        <p className="text-xl text-muted-foreground mb-8 max-w-2xl mx-auto">
          Get expert veterinary advice from the comfort of your home, anytime you need it.
        </p>
      </div>

      {/* Service Types Tabs */}
      <div className="mb-16">
        <Tabs defaultValue="text" className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-8">
            <TabsTrigger value="text" className="text-base py-3">
              <MessageCircle className="h-5 w-5 mr-2" />
              Text Chat
            </TabsTrigger>
            <TabsTrigger value="video" className="text-base py-3">
              <Video className="h-5 w-5 mr-2" />
              Video Call
            </TabsTrigger>
            <TabsTrigger value="phone" className="text-base py-3">
              <Phone className="h-5 w-5 mr-2" />
              Phone Call
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="text" className="animate-fade-in">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
              <div>
                <h2 className="text-3xl font-display font-medium mb-4">Text Chat Consultations</h2>
                <p className="mb-6 text-muted-foreground">
                  Send messages and photos to licensed veterinarians and receive expert advice for non-emergency concerns.
                </p>
                <ul className="space-y-3 mb-6">
                  <li className="flex items-center">
                    <Clock className="h-5 w-5 text-primary mr-2" />
                    <span>Responses within 30 minutes</span>
                  </li>
                  <li className="flex items-center">
                    <Check className="h-5 w-5 text-primary mr-2" />
                    <span>Share photos and medical history</span>
                  </li>
                  <li className="flex items-center">
                    <Check className="h-5 w-5 text-primary mr-2" />
                    <span>Secure messaging platform</span>
                  </li>
                </ul>
                <Button className="rounded-full px-8 group">
                  Start Text Chat
                  <ArrowRight className="ml-2 h-4 w-4 transition-transform duration-300 group-hover:translate-x-1" />
                </Button>
              </div>
              <div className="relative">
                <div className="absolute -inset-4 bg-gradient-to-r from-primary/10 to-primary/5 rounded-3xl blur-xl opacity-60"></div>
                <img
                  src="https://images.unsplash.com/photo-1616587894289-86480e533129?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80"
                  alt="Pet owner texting with vet"
                  className="relative rounded-2xl shadow-md w-full h-80 object-cover"
                />
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="video" className="animate-fade-in">
            {/* Video call content similar to text chat */}
            <div>Video call content would go here</div>
          </TabsContent>
          
          <TabsContent value="phone" className="animate-fade-in">
            {/* Phone call content similar to text chat */}
            <div>Phone call content would go here</div>
          </TabsContent>
        </Tabs>
      </div>

      {/* Benefits */}
      <div className="mb-16">
        <h2 className="text-3xl font-display font-medium mb-8 text-center">
          Benefits of Veterinary Telemedicine
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {benefits.map((benefit, index) => (
            <div key={index} className="bg-card border border-border rounded-xl p-6 transition-all hover:shadow-md hover:border-primary/20">
              <div className="flex items-start">
                <span className="mr-3 bg-primary/10 rounded-full p-1.5 text-primary">
                  <Check className="h-5 w-5" />
                </span>
                <span className="text-lg">{benefit}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* FAQs */}
      <div className="mb-16">
        <h2 className="text-3xl font-display font-medium mb-8 text-center">
          Frequently Asked Questions
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {faqs.map((faq, index) => (
            <div key={index} className="bg-card border border-border rounded-xl p-6">
              <h3 className="text-lg font-medium mb-2">{faq.question}</h3>
              <p className="text-muted-foreground">{faq.answer}</p>
            </div>
          ))}
        </div>
      </div>

      {/* CTA */}
      <div className="bg-gradient-to-br from-primary to-primary/80 rounded-2xl p-8 md:p-12 text-center text-white">
        <h3 className="text-2xl font-display font-medium mb-4">Ready to get expert veterinary advice?</h3>
        <p className="mb-6 text-white/80 max-w-lg mx-auto">
          Sign up today and get your first consultation at 50% off.
        </p>
        <Button variant="outline" className="bg-white text-primary hover:bg-white/90 rounded-full px-8">
          Start Now
        </Button>
      </div>
    </div>
  );
};

// HomePage component
const HomePage = () => {
  return (
    <div className="home-page">
      <section className="hero-section bg-gradient-to-br from-primary/5 to-secondary/10 rounded-3xl p-12 mb-20">
        <div className="text-center">
          <h1 className="text-5xl font-display font-medium mb-6">Welcome to PetPal</h1>
          <p className="text-xl mb-8 max-w-2xl mx-auto">Your complete pet care solution for all your furry friends.</p>
          <Button size="lg">Explore Our Services</Button>
        </div>
      </section>
      
      <section className="services-section mb-20">
        <h2 className="text-3xl font-display font-medium mb-8 text-center">Our Services</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <ServiceCard 
            title="Pet Grooming" 
            description="Professional grooming services for all breeds"
            icon={<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 2L2 7l10 5 10-5-10-5z"/></svg>}
            path="/services/pet-grooming"
          />
          <ServiceCard 
            title="Emergency Locator" 
            description="Find emergency veterinary care near you"
            icon={<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M12 8v4M12 16h.01"/></svg>}
            path="/services/emergency-locator"
          />
          <ServiceCard 
            title="Chat with Vets" 
            description="Get expert advice from licensed veterinarians"
            icon={<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"/></svg>}
            path="/services/chat-with-vets"
          />
        </div>
      </section>
      
      <section className="cta-section bg-primary/5 rounded-2xl p-8 md:p-12 flex flex-col md:flex-row md:items-center justify-between mb-20">
        <div>
          <h3 className="text-2xl font-display font-medium mb-2">Ready to pamper your pet?</h3>
          <p className="text-muted-foreground mb-6 md:mb-0">Join thousands of happy pet owners using PetPal.</p>
        </div>
        <Button size="lg" className="rounded-full px-8 group whitespace-nowrap">
          Get Started
          <ArrowRight className="ml-2 h-4 w-4 transition-transform duration-300 group-hover:translate-x-1" />
        </Button>
      </section>
    </div>
  );
};

// Main App component
const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Layout><HomePage /></Layout>} />
        <Route path="/services/pet-grooming" element={<Layout><PetGrooming /></Layout>} />
        <Route path="/services/emergency-locator" element={<Layout><EmergencyLocator /></Layout>} />
        <Route path="/services/chat-with-vets" element={<Layout><ChatWithVets /></Layout>} />
        <Route path="/auth/sign-in" element={<Layout><SignIn /></Layout>} />
        <Route path="/auth/sign-up" element={<Layout><SignUp /></Layout>} />
        {/* Add other routes as needed */}
      </Routes>
    </Router>
  );
};

export default App;

// ========================== END OF FILE ==========================
